//
//  SearchCharactersInteractor.swift
//  BQMarvelBattle
//
//  Created by Tarsha de Souza on 9/5/20.
//  Copyright (c) 2020 Tarsha de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol SearchCharactersBusinessLogic {
    func searchCharacterNames(request: SearchCharacters.Model.Request)
    func searchAllCharacters()
}

protocol SearchCharactersDataStore {
}

class SearchCharactersInteractor: SearchCharactersBusinessLogic, SearchCharactersDataStore {
    var presenter: SearchCharactersPresentationLogic?
    var repository: Repository?
    
    func searchCharacterNames(request: SearchCharacters.Model.Request) {
        repository = RemoteRepository()
        let nameQuery = request.characterName
        repository?.retrieveCharactersViaName(queryString: nameQuery, completion: { (results, error) in
            guard error == nil else {
                self.presenter?.showError(with: AppError.notFoundError)
                return
            }

            guard let characters = results else {
                self.presenter?.showError(with: AppError.notFoundError)
                return
            }
            let response = SearchCharacters.Model.Response(characters: characters)
            self.presenter?.presentSearchResults(response: response)
        })
    }
    
    func searchAllCharacters() {
        repository = LocalRepository()
        repository?.retrieveAllCharacters(path: "characters", completion: { (characters: [Character]?, error) in
            guard error == nil else {
                self.presenter?.showError(with: AppError.resourceLoadingError)
                return
            }
            
            guard let characters = characters else {
                self.presenter?.showError(with: AppError.resourceLoadingError)
                return
            }
            let response = SearchCharacters.Model.Response(characters: characters)
            self.presenter?.presentSearchResults(response: response)
        })
    }
}

class Connectivity {
    class func isConnectedToInternet() -> Bool {
        return NetworkReachabilityManager()?.isReachable ?? false
    }
}
