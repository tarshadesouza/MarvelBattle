//
//  SearchCharactersViewController.swift
//  BQMarvelBattle
//
//  Created by Tarsha de Souza on 9/5/20.
//  Copyright (c) 2020 Tarsha de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCharactersDelegate {
    func didSelectCharacter(at index: IndexPath)
}

protocol SearchCharactersDisplayLogic: class {
    func displayData(viewModel: SearchCharacters.Model.ViewModel)
}

class SearchCharactersViewController: UIViewController, SearchCharactersDisplayLogic {
    
    @IBOutlet weak var searchBar: UISearchBar! {
        didSet {
            searchBar.tintColor = .appPrimaryDark
            searchBar.barTintColor = .appAccent
            
            let textField = searchBar.value(forKey: "searchField") as! UITextField
            
            let glassIconView = textField.leftView as! UIImageView
            glassIconView.image = glassIconView.image?.withRenderingMode(UIImage.RenderingMode.alwaysTemplate)
            glassIconView.tintColor = UIColor.white
            
            textField.font = .appBody
            textField.textColor = .characterCellLabel
        }
    }
    
    @IBOutlet weak var tableView: UITableView!

    var tableDatasource: SearchCharacterDatasource?
    var tableDelegate: SearchCharacterTableDelegate?
    var interactor: SearchCharactersBusinessLogic?
    var router: (NSObjectProtocol & SearchCharactersRoutingLogic & SearchCharactersDataPassing)?
    var characters: [Character]?
    var isBattle = false
    var battleArray = [Character]()
    var numberOfFighters = 0
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setUpUI()
        setupTableView(with: characters)
        tableView.reloadData()
    }
    
    private func setup() {
        let viewController = self
        let interactor = SearchCharactersInteractor()
        let presenter = SearchCharactersPresenter()
        let router = SearchCharactersRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func setupTableView(with items: [Character]?) {
        self.characters = items
        tableDelegate = SearchCharacterTableDelegate(self)
        tableDatasource = SearchCharacterDatasource(items: items, tableView: self.tableView, delegate: tableDelegate!)
    }
    
    private func setUpUI() {
        searchBar.delegate = self
        self.view.backgroundColor = .appPrimaryDark
    }
    
    func setupNavigationBar() {
        
        let rankingButton = UIBarButtonItem(image: UIImage(named: "ic_trophy"),
                                            style: .done,
                                            target: self,
                                            action: #selector(SearchCharactersViewController.goToRankings))
        
        let battleArenaButton = UIBarButtonItem(image: UIImage(named: "ic_arena"),
                                                style: .done,
                                                target: self,
                                                action: #selector(SearchCharactersViewController.goToBattleArena))
        rankingButton.tintColor = .systemRed
        battleArenaButton.tintColor = .systemBlue
        self.setRightButton([rankingButton,battleArenaButton])
        self.setTitle("Character Search")
    }
    
    @objc func goToBattleArena() {
        self.router?.goToBattleArena()
    }
    
    @objc func goToRankings() {
        //        self.router?.popViewController(self)
    }
    
    func displayData(viewModel: SearchCharacters.Model.ViewModel) {
        guard let characters = viewModel.characters else {
            return
        }
        setupTableView(with: characters)
        tableView.reloadData()
    }
    
    func isReadyToBattle() -> Bool {
        if numberOfFighters == 2 {
            return true
        }
        return false
    }
}

extension SearchCharactersViewController {
    //Interaction
    func searchForCharacters(with name: String) {
        let request = SearchCharacters.Model.Request(characterName: name)
        interactor?.searchCharacterNames(request: request)
    }
}

//MARK: Tableview Delegate methods
extension SearchCharactersViewController: SearchCharactersDelegate {
    
    func didSelectCharacter(at index: IndexPath) {
        searchBar.resignFirstResponder()

        guard let character = characters?[index.row] else {
            // TODO: Error handling
            return
        }
        
        if isBattle {
            if isReadyToBattle() {
                numberOfFighters = 0
                self.router?.goToFightBattle(with: battleArray)
            } else {
                battleArray.append(character)
                numberOfFighters += 1
            }
        } else {
            self.router?.showCharacterDetail(with: character)
        }
    }
    

}

extension SearchCharactersViewController: UISearchBarDelegate {
    
    //MARK: SearchBar Delegates
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let keySearch = searchBar.text else {return}
        searchBar.endEditing(true)
        searchForCharacters(with: keySearch)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
    }
}
