//
//  SearchCharactersViewController.swift
//  BQMarvelBattle
//
//  Created by Tarsha de Souza on 9/5/20.
//  Copyright (c) 2020 Tarsha de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCharactersDisplayLogic: class {
    func displayData(viewModel: SearchCharacters.Model.ViewModel)
}

class SearchCharactersViewController: UIViewController, SearchCharactersDisplayLogic {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!

    var interactor: SearchCharactersBusinessLogic?
    var router: (NSObjectProtocol & SearchCharactersRoutingLogic & SearchCharactersDataPassing)?
    
    var characters: [Character]?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setUpUI()
    }
    
    private func setup() {
        let viewController = self
        let interactor = SearchCharactersInteractor()
        let presenter = SearchCharactersPresenter()
        let router = SearchCharactersRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setUpUI() {
        tableView.dataSource = self
        tableView.delegate = self
        searchBar.delegate = self
    }
    
    func setupNavigationBar() {
        let rankingButton = UIBarButtonItem(image: UIImage(named: "ic_trophy"),
                                            style: .done,
                                            target: self,
                                            action: #selector(SearchCharactersViewController.goToBattleArena))
        rankingButton.tintColor = .systemYellow
        
        let battleArenaButton = UIBarButtonItem(image: UIImage(named: "ic_trophy"),
                                            style: .done,
                                            target: self,
                                            action: #selector(SearchCharactersViewController.goToBattleArena))
        rankingButton.tintColor = .red
        self.setRightButton([rankingButton,battleArenaButton])
        self.setTitle("Search")
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @objc func goToBattleArena() {
//        self.router?.popViewController(self)
    }
    
    func displayData(viewModel: SearchCharacters.Model.ViewModel) {
        characters = viewModel.characters
        tableView.reloadData()
    }
    
}

extension SearchCharactersViewController {
    //Interaction
    func searchForCharacters(with name: String) {
        let request = SearchCharacters.Model.Request(characterName: name)
        interactor?.searchCharacterNames(request: request)
    }
}

//MARK: Tableview Delegate methods
extension SearchCharactersViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return characters?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
       
        guard let cellData = characters?[indexPath.row] else {
            return UITableViewCell()
        }

        if let cell = tableView.dequeueReusableCell(withIdentifier: Cells.CharacterCell, for: indexPath) as? CharacterTableViewCell {
            cell.setUp(characterData: cellData)
            return cell
        }
        return UITableViewCell()
    }
    
}

extension SearchCharactersViewController: UISearchBarDelegate {
    
    //MARK: SearchBar Delegates
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let keySearch = searchBar.text else {return}
        searchBar.endEditing(true)
        searchForCharacters(with: keySearch)
    }
    

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
 
    }
}
