//
//  BattleArenaRouter.swift
//  BQMarvelBattle
//
//  Created by Tarsha de Souza on 9/5/20.
//  Copyright (c) 2020 Tarsha de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BattleArenaRoutingLogic {
    func routeToSearchController()
    func presentWinnerPopUp(with winner: Character)
    func goToRankings()
}

protocol BattleArenaDataPassing {
    var dataStore: BattleArenaDataStore? { get }
}

class BattleArenaRouter: NSObject, BattleArenaRoutingLogic, BattleArenaDataPassing {
    weak var viewController: BattleArenaViewController?
    var dataStore: BattleArenaDataStore?
    
    func routeToSearchController() {
        guard let BattleArenaViewController = viewController else { return }
        let searchViewController = BattleArenaViewController.navigationController?.viewControllers[0] as! SearchCharactersViewController
        searchViewController.isBattle = true
        BattleArenaViewController.navigationController?.popToRootViewController(animated: true)
    }
    
    func presentWinnerPopUp(with winner: Character) {
        guard let BattleArenaViewController = viewController else { return }
        
        let bundle = Bundle(for: type(of: self))
        if let popUp = bundle.loadNibNamed(ReadyToBattlePopUpView.defaultReuseIdentifier, owner: self, options: nil)?.first as? ReadyToBattlePopUpView {
            BattleArenaViewController.view.addSubview(popUp)
            BattleArenaViewController.view.bringSubviewToFront(popUp)
            
            popUp.configurePopUp(with: winner.thumbnail?.fullPath() ?? "", text: winner.name, buttonText: "See Rankings")
            popUp.translatesAutoresizingMaskIntoConstraints = false
            
            popUp.topAnchor.constraint(equalTo: BattleArenaViewController.view.topAnchor)
                .isActive = true
            popUp.leadingAnchor.constraint(equalTo: BattleArenaViewController.view.leadingAnchor)
                .isActive = true
            popUp.bottomAnchor.constraint(equalTo: BattleArenaViewController.view.bottomAnchor)
                .isActive = true
            popUp.trailingAnchor.constraint(equalTo: BattleArenaViewController.view.trailingAnchor)
                .isActive = true
            popUp.delegate = BattleArenaViewController
        }
    }
    
    func goToRankings() {
        guard let BattleArenaViewController = viewController else { return }
        let rankingsVC = RankingsViewController()
        rankingsVC.battleSummary = dataStore?.BattleSummary
        BattleArenaViewController.navigationController?.pushViewController(rankingsVC, animated: true)
    }
    
}
