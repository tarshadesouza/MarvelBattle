//
//  BattleArenaViewController.swift
//  BQMarvelBattle
//
//  Created by Tarsha de Souza on 9/5/20.
//  Copyright (c) 2020 Tarsha de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BattleArenaDisplayLogic: class {
    func showWinner(viewModel: BattleArena.Model.ViewModel)
}

class BattleArenaViewController: UIViewController, BattleArenaDisplayLogic {
    
    @IBOutlet weak var battleArenaContainer: UIView! {
        didSet {
            battleArenaContainer.backgroundColor = .appPrimaryDark
        }
    }
    
    @IBOutlet weak var firstOpponentView: UIImageView! {
        didSet {
            firstOpponentView.makeRounded()
            firstOpponentView.contentMode = .scaleAspectFill
        }
    }
    
    @IBOutlet weak var secondOpponentView: UIImageView! {
        didSet {
            secondOpponentView.makeRounded()
            secondOpponentView.contentMode = .scaleAspectFill
        }
    }
    
    @IBOutlet weak var battleButton: RoundButton! {
        didSet {
            battleButton.setTitle("Choose Fighters", for: .normal)
            battleButton.titleLabel?.font = .appButton
            battleButton.setTitleColor(.white, for: .normal)
            battleButton.backgroundColor = .appAccent
        }
    }
    @IBOutlet weak var finishBattleButton: RoundButton! {
        didSet {
            finishBattleButton.setTitle("End Battles", for: .normal)
            finishBattleButton.titleLabel?.font = .appButton
            finishBattleButton.setTitleColor(.white, for: .normal)
            finishBattleButton.backgroundColor = .appAccent
        }
    }
    
    @IBOutlet weak var dashedLine: DashedLineView!
    
    var interactor: BattleArenaBusinessLogic?
    var router: (NSObjectProtocol & BattleArenaRoutingLogic & BattleArenaDataPassing)?
    var fighters: [Character]?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup(){
        let viewController = self
        let interactor = BattleArenaInteractor()
        let presenter = BattleArenaPresenter()
        let router = BattleArenaRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpNavBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        configureFighterImage()
    }
    
    func getWinner() {
        guard let battleFighters = fighters else {
            return
        }
        let request = BattleArena.Model.Request(fighters: battleFighters)
        interactor?.determineWinner(request: request)
    }
    
    func showWinner(viewModel: BattleArena.Model.ViewModel) {
        self.router?.presentWinnerPopUp(with: viewModel.winner)
    }
    
    func configureFighterImage() {
        guard let fighters = fighters else {
            updateBattleButtonUI(isValid: false)
            return
        }
        firstOpponentView.download(image: fighters[0].thumbnail?.fullPath() ?? "")
        secondOpponentView.download(image: fighters[1].thumbnail?.fullPath() ?? "")
        updateBattleButtonUI(isValid: true)
    }
    
    func updateBattleButtonUI(isValid: Bool) {
        if isValid {
            battleButton.setTitle("FIGHT NOW", for: .normal)
        } else {
            battleButton.setTitle("Choose Fighters", for: .normal)
        }
    }
    
    func setUpNavBar() {
        self.setTitle("Choose Your Fighters")
    }
    
    @IBAction func battleButtonPressed(_ sender: UIButton) {
        guard let _ = fighters else {
            self.router?.routeToSearchController(isBattle: true)
            return
        }
        getWinner()
    }
    
    @IBAction func finishBattleButtonPressed(_ sender: UIButton) {
        self.router?.routeToSearchController(isBattle: false)
    }
    
}

extension BattleArenaViewController {
    func drawDottedLine(start p0: CGPoint, end p1: CGPoint, view: UIView) {
        let shapeLayer = CAShapeLayer()
        shapeLayer.strokeColor = UIColor.lightGray.cgColor
        shapeLayer.lineWidth = 1
        shapeLayer.lineDashPattern = [7, 5]
        
        let path = CGMutablePath()
        path.addLines(between: [p0, p1])
        shapeLayer.path = path
        view.layer.addSublayer(shapeLayer)
    }
}
